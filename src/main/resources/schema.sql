DROP TABLE IF EXISTS TYPES_EVENTS;
DROP TABLE IF EXISTS USER_ZONE CASCADE;
DROP TABLE IF EXISTS TYPE_TRASH CASCADE;
DROP TABLE IF EXISTS PROFILES;
DROP TABLE IF EXISTS EVENTS;
DROP TABLE IF EXISTS Buildings CASCADE;
DROP TABLE IF EXISTS ZONES CASCADE;
DROP TABLE IF EXISTS USERS CASCADE;
DROP TABLE IF EXISTS TRASH_STATUS CASCADE;
DROP TABLE IF EXISTS TRASHES_EVENTS;
DROP TABLE IF EXISTS TRASHES;

DROP SEQUENCE IF EXISTS SQ_TYPES_EVENTS;
DROP SEQUENCE IF EXISTS SQ_ZONES;
DROP SEQUENCE IF EXISTS SQ_TRASH_STATUS;
DROP SEQUENCE IF EXISTS SQ_TYPE_TRASH;
DROP SEQUENCE IF EXISTS SQ_PROFILES;
DROP SEQUENCE IF EXISTS SQ_EVENTS;
DROP SEQUENCE IF EXISTS SQ_Buildings;
DROP SEQUENCE IF EXISTS SQ_USERS;
DROP SEQUENCE IF EXISTS SQ_USER_ZONE;
DROP SEQUENCE IF EXISTS SQ_Trashes;
DROP SEQUENCE IF EXISTS SQ_TRASHES_EVENTS;

/* CREATE TABLES */

CREATE TABLE TYPES_EVENTS (
                               ID NUMBER PRIMARY KEY,
                               NAME VARCHAR NOT NULL,
                               DESCRIPTION VARCHAR
);


CREATE TABLE ZONES (
                       ID NUMBER PRIMARY KEY,
                       NAME VARCHAR NOT NULL NOT NULL,
                       DESCRIPTION VARCHAR NOT NULL,
                       LOCAL VARCHAR NOT NULL
);


CREATE TABLE TRASH_STATUS (
                                ID NUMBER PRIMARY KEY,
                                NAME VARCHAR NOT NULL,
                                DESCRIPTION VARCHAR NOT NULL
);


CREATE TABLE TYPE_TRASH (
                              ID NUMBER PRIMARY KEY,
                              NAME VARCHAR NOT NULL,
                              DESCRIPTION VARCHAR NOT NULL
);


CREATE TABLE PROFILES (
                        ID NUMBER PRIMARY KEY,
                        NAME VARCHAR NOT NULL,
                        DESCRIPTION VARCHAR NOT NULL
);


CREATE TABLE EVENTS (
                         ID NUMBER PRIMARY KEY,
                         DESCRIPTION VARCHAR,
                         DATA_CRIACAO TIMESTAMP NOT NULL,
                         STATUS_PROBLEMA VARCHAR NOT NULL,
                         ID_TYPE_EVENTS NUMBER
);

ALTER TABLE EVENTS ADD CONSTRAINT FK_TYPE_EVENTS
    FOREIGN KEY (ID_TYPE_EVENTS)
        REFERENCES TYPES_EVENTS (ID);


CREATE TABLE BUILDINGS (
                         ID NUMBER PRIMARY KEY,
                         NAME VARCHAR NOT NULL,
                         ID_ZONE NUMBER NOT NULL
);

ALTER TABLE BUILDINGS ADD CONSTRAINT FK_BUILDINGS_ZONES
    FOREIGN KEY (ID_ZONE)
        REFERENCES ZONES (ID);


CREATE TABLE USERS (
                          ID NUMBER PRIMARY KEY,
                          EMAIL VARCHAR,
                          NAME VARCHAR NOT NULL,
                          LOGIN VARCHAR NOT NULL,
                          PASSWORD VARCHAR NOT NULL,
                          BLOCKED BOOLEAN NOT NULL DEFAULT FALSE,
                          DT_REGISTER TIMESTAMP NOT NULL,
                          ID_PROFILE NUMBER
);

ALTER TABLE USERS ADD CONSTRAINT FK_USERS_PROFILES
    FOREIGN KEY (ID_PROFILE)
        REFERENCES PROFILES (ID);


CREATE TABLE USER_ZONE (
                              ID NUMBER PRIMARY KEY,
                              ID_USER NUMBER,
                              ID_ZONE NUMBER
);

ALTER TABLE USER_ZONE ADD CONSTRAINT FK_USER_ZONE
    FOREIGN KEY (ID_USER)
        REFERENCES USERS (ID);

ALTER TABLE USER_ZONE ADD CONSTRAINT FK_ZONE_USER
    FOREIGN KEY (ID_ZONE)
        REFERENCES USERS (ID);

CREATE TABLE TRASHES (
                         ID NUMBER PRIMARY KEY,
                         BRAND VARCHAR NOT NULL,
                         DESCRIPTION VARCHAR NOT NULL,
                         CAPACITY DOUBLE NOT NULL,
                         OCCUPATION DOUBLE NOT NULL,
                         ID_STATUS NUMBER,
                         ID_TYPE NUMBER,
                         ID_BUILDING NUMBER,
                         ID_ZONE NUMBER
);

ALTER TABLE TRASHES ADD CONSTRAINT FK_TRASHES_BUILDINGS
    FOREIGN KEY (ID_BUILDING)
        REFERENCES Buildings (ID);

ALTER TABLE TRASHES ADD CONSTRAINT FK_TYPE_LIV
    FOREIGN KEY (ID_TYPE)
        REFERENCES TYPE_TRASH (ID);

ALTER TABLE TRASHES ADD CONSTRAINT FK_TRASH_STATUS
    FOREIGN KEY (ID_STATUS)
        REFERENCES TRASH_STATUS (ID);

ALTER TABLE TRASHES ADD CONSTRAINT FK_ZONES_TRASHES
    FOREIGN KEY (ID_ZONE)
        REFERENCES ZONES (ID);

ALTER TABLE TRASHES ADD CONSTRAINT TRASH_BUILDING_OR_ZONE
    CHECK (ID_ZONE IS NULL OR ID_BUILDING IS NULL);


CREATE TABLE TRASHES_EVENTS (
                                 ID NUMBER PRIMARY KEY,
                                 ID_EVENTO NUMBER,
                                 ID_TRASH NUMBER,
                                 ID_USER NUMBER,
                                 OCCUPATION DOUBLE,
                                 DATA TIMESTAMP NOT NULL
);

ALTER TABLE TRASHES_EVENTS ADD CONSTRAINT FK_TRASHES_EVENTS_EVENTS
    FOREIGN KEY (ID_EVENTO)
        REFERENCES EVENTS (ID);

ALTER TABLE TRASHES_EVENTS ADD CONSTRAINT FK_TRASHES_EVENTS_USERS
    FOREIGN KEY (ID_USER)
        REFERENCES USERS (ID);

ALTER TABLE TRASHES_EVENTS ADD CONSTRAINT FK_TRASHES_EVENTS_TRASH
    FOREIGN KEY (ID_TRASH)
        REFERENCES TRASHES (ID);

/* CREATE SEQUENCES */
CREATE SEQUENCE SQ_TYPES_EVENTS START 0;
CREATE SEQUENCE SQ_ZONES START 0;
CREATE SEQUENCE SQ_TRASH_STATUS START 0;
CREATE SEQUENCE SQ_TYPE_TRASH START 0;
CREATE SEQUENCE SQ_PROFILES START 0;
CREATE SEQUENCE SQ_EVENTS START 0;
CREATE SEQUENCE SQ_BUILDINGS START 0;
CREATE SEQUENCE SQ_USERS START 0;
CREATE SEQUENCE SQ_USER_ZONE START 0;
CREATE SEQUENCE SQ_TRASHES START 0;
CREATE SEQUENCE SQ_TRASHES_EVENTS START 0;